package org.biopax.model;


import java.util.Collection;
import java.util.Iterator;

import edu.stanford.smi.protegex.owl.model.OWLModel;
import edu.stanford.smi.protegex.owl.model.OWLProperty;
import edu.stanford.smi.protegex.owl.model.RDFSNamedClass;

/**
 * Generated by Protege-OWL  (http://protege.stanford.edu/plugins/owl).
 *
 * @version generated on Mon May 23 15:40:07 EDT 2005
 */
public class BioPAXFactory {
    public static final String SPONTANEOUS_L_R = "L-R";
    public static final String SPONTANEOUS_R_L = "R-L";
    public static final String BIOPAX_URL = "http://www.biopax.org/release/biopax-level2.owl";
    public static final String BIOPAX_LEVEL_1_URL = "http://www.biopax.org/release/biopax-level1.owl";
    // Usually this should be the same as BIOPAX_URL after release
    public static final String BIOPAX_ONT_DOWLOAD_URL = "http://www.biopax.org/Downloads/Level2v0.9/biopax-level2.owl";
    // the biopax name space used. BioPAX NS is based on level info
    private String bpNS;
    
    private OWLModel owlModel;

    public BioPAXFactory(OWLModel owlModel) {
        this.owlModel = owlModel;
        extractBioPAXLevelInfo(owlModel);
    }
    
    private void extractBioPAXLevelInfo(OWLModel model) {
        String defaultNs = model.getNamespaceManager().getDefaultNamespace();
        if (defaultNs.equals(BioPAXFactory.BIOPAX_URL + "#") ||
            defaultNs.equals(BioPAXFactory.BIOPAX_LEVEL_1_URL + "#")) {
            bpNS = defaultNs;
            return; // BioPAX has been set as default namespace
        }
        Collection namespaces = model.getNamespaceManager().getPrefixes();
        for (Iterator it = namespaces.iterator(); it.hasNext();) {
            String prefix = (String) it.next();
            String uri = model.getNamespaceManager().getNamespaceForPrefix(prefix);
            if (uri.equals(BioPAXFactory.BIOPAX_URL + "#") ||
                uri.equals(BioPAXFactory.BIOPAX_LEVEL_1_URL + "#")) {
                // Found biopax namespace definition. Set it as default regardless of levels
                bpNS = uri;
                break;
            }
        }
    }
    
    public String getNS() {
        return bpNS;
    }
    
    public OWLModel getOWLModel() {
        return this.owlModel;
    }
    
    public OWLProperty getOWLProperty(String propName) {
        String uri = getNS() + propName;
        String resoureceName = owlModel.getResourceNameForURI(uri);
        return owlModel.getOWLProperty(resoureceName);
    }

    public RDFSNamedClass getdnaParticipantClass() {
        final String uri = bpNS + "dnaParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }
    
    public RDFSNamedClass getSequenceParticipantClass() {
        String uri = bpNS + "sequenceParticipant";
        String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DNAParticipant creatednaParticipant(String name) {
        final RDFSNamedClass cls = getdnaParticipantClass();
        return (DNAParticipant) cls.createInstance(name).as(DNAParticipant.class);
    }


    public RDFSNamedClass getphysicalEntityParticipantClass() {
        final String uri = bpNS + "physicalEntityParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PhysicalEntityParticipant createphysicalEntityParticipant(String name) {
        final RDFSNamedClass cls = getphysicalEntityParticipantClass();
        return (PhysicalEntityParticipant) cls.createInstance(name).as(PhysicalEntityParticipant.class);
    }


    public RDFSNamedClass getutilityClassClass() {
        final String uri = bpNS + "utilityClass";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UtilityClass createutilityClass(String name) {
        final RDFSNamedClass cls = getutilityClassClass();
        return (UtilityClass) cls.createInstance(name).as(UtilityClass.class);
    }


    public RDFSNamedClass getentityClass() {
        final String uri = bpNS + "entity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Entity createentity(String name) {
        final RDFSNamedClass cls = getentityClass();
        return (Entity) cls.createInstance(name).as(Entity.class);
    }


    public RDFSNamedClass getbioSourceClass() {
        final String uri = bpNS + "bioSource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BioSource createbioSource(String name) {
        final RDFSNamedClass cls = getbioSourceClass();
        return (BioSource) cls.createInstance(name).as(BioSource.class);
    }


    public RDFSNamedClass getexternalReferenceUtilityClassClass() {
        final String uri = bpNS + "externalReferenceUtilityClass";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ExternalReferenceUtilityClass createexternalReferenceUtilityClass(String name) {
        final RDFSNamedClass cls = getexternalReferenceUtilityClassClass();
        return (ExternalReferenceUtilityClass) cls.createInstance(name).as(ExternalReferenceUtilityClass.class);
    }


    public RDFSNamedClass getpathwayStepClass() {
        final String uri = bpNS + "pathwayStep";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PathwayStep createpathwayStep(String name) {
        final RDFSNamedClass cls = getpathwayStepClass();
        return (PathwayStep) cls.createInstance(name).as(PathwayStep.class);
    }


    public RDFSNamedClass getinteractionClass() {
        final String uri = bpNS + "interaction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Interaction createinteraction(String name) {
        final RDFSNamedClass cls = getinteractionClass();
        return (Interaction) cls.createInstance(name).as(Interaction.class);
    }


    public RDFSNamedClass getpathwayClass() {
        final String uri = bpNS + "pathway";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Pathway createpathway(String name) {
        final RDFSNamedClass cls = getpathwayClass();
        return (Pathway) cls.createInstance(name).as(Pathway.class);
    }


    public RDFSNamedClass getrnaClass() {
        final String uri = bpNS + "rna";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RNA createrna(String name) {
        final RDFSNamedClass cls = getrnaClass();
        return (RNA) cls.createInstance(name).as(RNA.class);
    }


    public RDFSNamedClass getphysicalEntityClass() {
        final String uri = bpNS + "physicalEntity";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PhysicalEntity createphysicalEntity(String name) {
        final RDFSNamedClass cls = getphysicalEntityClass();
        return (PhysicalEntity) cls.createInstance(name).as(PhysicalEntity.class);
    }


    public RDFSNamedClass getproteinClass() {
        final String uri = bpNS + "protein";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Protein createprotein(String name) {
        final RDFSNamedClass cls = getproteinClass();
        return (Protein) cls.createInstance(name).as(Protein.class);
    }


    public RDFSNamedClass getcomplexClass() {
        final String uri = bpNS + "complex";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Complex createcomplex(String name) {
        final RDFSNamedClass cls = getcomplexClass();
        return (Complex) cls.createInstance(name).as(Complex.class);
    }


    public RDFSNamedClass getsmallMoleculeClass() {
        final String uri = bpNS + "smallMolecule";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SmallMolecule createsmallMolecule(String name) {
        final RDFSNamedClass cls = getsmallMoleculeClass();
        return (SmallMolecule) cls.createInstance(name).as(SmallMolecule.class);
    }


    public RDFSNamedClass getdnaClass() {
        final String uri = bpNS + "dna";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DNA createdna(String name) {
        final RDFSNamedClass cls = getdnaClass();
        return (DNA) cls.createInstance(name).as(DNA.class);
    }


    public RDFSNamedClass getchemicalStructureClass() {
        final String uri = bpNS + "chemicalStructure";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ChemicalStructure createchemicalStructure(String name) {
        final RDFSNamedClass cls = getchemicalStructureClass();
        return (ChemicalStructure) cls.createInstance(name).as(ChemicalStructure.class);
    }


    public RDFSNamedClass getconfidenceClass() {
        final String uri = bpNS + "confidence";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Confidence createconfidence(String name) {
        final RDFSNamedClass cls = getconfidenceClass();
        return (Confidence) cls.createInstance(name).as(Confidence.class);
    }


    public RDFSNamedClass getsequenceLocationClass() {
        final String uri = bpNS + "sequenceLocation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SequenceLocation createsequenceLocation(String name) {
        final RDFSNamedClass cls = getsequenceLocationClass();
        return (SequenceLocation) cls.createInstance(name).as(SequenceLocation.class);
    }


    public RDFSNamedClass getevidenceClass() {
        final String uri = bpNS + "evidence";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Evidence createevidence(String name) {
        final RDFSNamedClass cls = getevidenceClass();
        return (Evidence) cls.createInstance(name).as(Evidence.class);
    }


    public RDFSNamedClass getxrefClass() {
        final String uri = bpNS + "xref";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Xref createxref(String name) {
        final RDFSNamedClass cls = getxrefClass();
        return (Xref) cls.createInstance(name).as(Xref.class);
    }


    public RDFSNamedClass getdataSourceClass() {
        final String uri = bpNS + "dataSource";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public DataSource createdataSource(String name) {
        final RDFSNamedClass cls = getdataSourceClass();
        return (DataSource) cls.createInstance(name).as(DataSource.class);
    }


    public RDFSNamedClass getopenControlledVocabularyClass() {
        final String uri = bpNS + "openControlledVocabulary";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public OpenControlledVocabulary createopenControlledVocabulary(String name) {
        final RDFSNamedClass cls = getopenControlledVocabularyClass();
        return (OpenControlledVocabulary) cls.createInstance(name).as(OpenControlledVocabulary.class);
    }


    public RDFSNamedClass getsequenceFeatureClass() {
        final String uri = bpNS + "sequenceFeature";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SequenceFeature createsequenceFeature(String name) {
        final RDFSNamedClass cls = getsequenceFeatureClass();
        return (SequenceFeature) cls.createInstance(name).as(SequenceFeature.class);
    }


    public RDFSNamedClass getsequenceSiteClass() {
        final String uri = bpNS + "sequenceSite";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SequenceSite createsequenceSite(String name) {
        final RDFSNamedClass cls = getsequenceSiteClass();
        return (SequenceSite) cls.createInstance(name).as(SequenceSite.class);
    }


    public RDFSNamedClass getsequenceIntervalClass() {
        final String uri = bpNS + "sequenceInterval";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SequenceInterval createsequenceInterval(String name) {
        final RDFSNamedClass cls = getsequenceIntervalClass();
        return (SequenceInterval) cls.createInstance(name).as(SequenceInterval.class);
    }


    public RDFSNamedClass getrnaParticipantClass() {
        final String uri = bpNS + "rnaParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RNAParticipant creaternaParticipant(String name) {
        final RDFSNamedClass cls = getrnaParticipantClass();
        return (RNAParticipant) cls.createInstance(name).as(RNAParticipant.class);
    }


    public RDFSNamedClass getcomplexParticipantClass() {
        final String uri = bpNS + "complexParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ComplexParticipant createcomplexParticipant(String name) {
        final RDFSNamedClass cls = getcomplexParticipantClass();
        return (ComplexParticipant) cls.createInstance(name).as(ComplexParticipant.class);
    }


    public RDFSNamedClass getsmallMoleculeParticipantClass() {
        final String uri = bpNS + "smallMoleculeParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public SmallMoleculeParticipant createsmallMoleculeParticipant(String name) {
        final RDFSNamedClass cls = getsmallMoleculeParticipantClass();
        return (SmallMoleculeParticipant) cls.createInstance(name).as(SmallMoleculeParticipant.class);
    }


    public RDFSNamedClass getproteinParticipantClass() {
        final String uri = bpNS + "proteinParticipant";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ProteinParticipant createproteinParticipant(String name) {
        final RDFSNamedClass cls = getproteinParticipantClass();
        return (ProteinParticipant) cls.createInstance(name).as(ProteinParticipant.class);
    }


    public RDFSNamedClass getpublicationXrefClass() {
        final String uri = bpNS + "publicationXref";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PublicationXref createpublicationXref(String name) {
        final RDFSNamedClass cls = getpublicationXrefClass();
        return (PublicationXref) cls.createInstance(name).as(PublicationXref.class);
    }


    public RDFSNamedClass getrelationshipXrefClass() {
        final String uri = bpNS + "relationshipXref";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public RelationshipXref createrelationshipXref(String name) {
        final RDFSNamedClass cls = getrelationshipXrefClass();
        return (RelationshipXref) cls.createInstance(name).as(RelationshipXref.class);
    }


    public RDFSNamedClass getunificationXrefClass() {
        final String uri = bpNS + "unificationXref";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public UnificationXref createunificationXref(String name) {
        final RDFSNamedClass cls = getunificationXrefClass();
        return (UnificationXref) cls.createInstance(name).as(UnificationXref.class);
    }


    public RDFSNamedClass getconversionClass() {
        final String uri = bpNS + "conversion";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Conversion createconversion(String name) {
        final RDFSNamedClass cls = getconversionClass();
        return (Conversion) cls.createInstance(name).as(Conversion.class);
    }


    public RDFSNamedClass getphysicalInteractionClass() {
        final String uri = bpNS + "physicalInteraction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public PhysicalInteraction createphysicalInteraction(String name) {
        final RDFSNamedClass cls = getphysicalInteractionClass();
        return (PhysicalInteraction) cls.createInstance(name).as(PhysicalInteraction.class);
    }


    public RDFSNamedClass getcontrolClass() {
        final String uri = bpNS + "control";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Control createcontrol(String name) {
        final RDFSNamedClass cls = getcontrolClass();
        return (Control) cls.createInstance(name).as(Control.class);
    }


    public RDFSNamedClass getcatalysisClass() {
        final String uri = bpNS + "catalysis";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Catalysis createcatalysis(String name) {
        final RDFSNamedClass cls = getcatalysisClass();
        return (Catalysis) cls.createInstance(name).as(Catalysis.class);
    }


    public RDFSNamedClass getmodulationClass() {
        final String uri = bpNS + "modulation";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Modulation createmodulation(String name) {
        final RDFSNamedClass cls = getmodulationClass();
        return (Modulation) cls.createInstance(name).as(Modulation.class);
    }


    public RDFSNamedClass getcomplexAssemblyClass() {
        final String uri = bpNS + "complexAssembly";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ComplexAssembly createcomplexAssembly(String name) {
        final RDFSNamedClass cls = getcomplexAssemblyClass();
        return (ComplexAssembly) cls.createInstance(name).as(ComplexAssembly.class);
    }


    public RDFSNamedClass getbiochemicalReactionClass() {
        final String uri = bpNS + "biochemicalReaction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public BiochemicalReaction createbiochemicalReaction(String name) {
        final RDFSNamedClass cls = getbiochemicalReactionClass();
        return (BiochemicalReaction) cls.createInstance(name).as(BiochemicalReaction.class);
    }


    public RDFSNamedClass gettransportClass() {
        final String uri = bpNS + "transport";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public Transport createtransport(String name) {
        final RDFSNamedClass cls = gettransportClass();
        return (Transport) cls.createInstance(name).as(Transport.class);
    }


    public RDFSNamedClass getexperimentalFormClass() {
        final String uri = bpNS + "experimentalForm";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public ExperimentalForm createexperimentalForm(String name) {
        final RDFSNamedClass cls = getexperimentalFormClass();
        return (ExperimentalForm) cls.createInstance(name).as(ExperimentalForm.class);
    }


    public RDFSNamedClass gettransportWithBiochemicalReactionClass() {
        final String uri = bpNS + "transportWithBiochemicalReaction";
        final String name = owlModel.getResourceNameForURI(uri);
        return owlModel.getRDFSNamedClass(name);
    }

    public TransportWithBiochemicalReaction createtransportWithBiochemicalReaction(String name) {
        final RDFSNamedClass cls = gettransportWithBiochemicalReactionClass();
        return (TransportWithBiochemicalReaction) cls.createInstance(name).as(TransportWithBiochemicalReaction.class);
    }
}
